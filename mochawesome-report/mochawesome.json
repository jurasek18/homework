{
  "stats": {
    "suites": 5,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2020-01-19T15:10:20.398Z",
    "end": "2020-01-19T15:11:01.125Z",
    "duration": 40727,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5ac5e41b-1f1e-4573-9b67-cf42750e4046",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 383,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "global.expect = expect;\nglobal.browser = await puppeteer.launch(opts);",
          "err": {},
          "uuid": "bf4067d1-ae7b-4cf0-9ccf-6779a5bc4f29",
          "parentUUID": "5ac5e41b-1f1e-4573-9b67-cf42750e4046",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook",
          "fullTitle": "\"after all\" hook",
          "timedOut": false,
          "duration": 297,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "browser.close();\nglobal.browser = globalVariables.browser;\nglobal.expect = globalVariables.expect;",
          "err": {},
          "uuid": "22e8f939-b562-4116-81b6-3dea340410f8",
          "parentUUID": "5ac5e41b-1f1e-4573-9b67-cf42750e4046",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "62effb5c-c0de-476f-9aa2-a5ca2b84adb4",
          "title": "TC1: Test the automatic language recognition for two languages",
          "fullFile": "C:\\Citrix\\Pupeteer\\test\\01_autoDetectLanguage.js",
          "file": "\\test\\01_autoDetectLanguage.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "TC1: Test the automatic language recognition for two languages \"before all\" hook",
              "timedOut": false,
              "duration": 1695,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "page = await browser.newPage();\nawait page.goto(URL);\nawait page.setViewport({ width: screenWidth, height: screenHeight });",
              "err": {},
              "uuid": "bb510ea5-1a36-44c0-88a0-618aab33d891",
              "parentUUID": "62effb5c-c0de-476f-9aa2-a5ca2b84adb4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "TC1: Test the automatic language recognition for two languages \"after all\" hook",
              "timedOut": false,
              "duration": 30,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page.close();",
              "err": {},
              "uuid": "6b90969b-e1e4-4cb2-bb4e-2834f7897570",
              "parentUUID": "62effb5c-c0de-476f-9aa2-a5ca2b84adb4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "TC1: Test the automatic language recognition for two languages \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// make screenshot for failed tests        \nif (this.currentTest.state === 'failed') {\n    await page.screenshot({\n        path: pathToScreenshots.concat(Date.now()).concat(\"_failure.png\"),\n        fullPage: true\n    });\n}",
              "err": {},
              "uuid": "22c1f142-31f4-43e4-9b1f-399db860e2c0",
              "parentUUID": "62effb5c-c0de-476f-9aa2-a5ca2b84adb4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "page should have the correct page title",
              "fullTitle": "TC1: Test the automatic language recognition for two languages page should have the correct page title",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(await page.title()).to.eql(pageTitle);",
              "err": {},
              "uuid": "f7f4f892-29e8-4e93-bdb0-659bbe4e4f37",
              "parentUUID": "62effb5c-c0de-476f-9aa2-a5ca2b84adb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "detect language is enabled",
              "fullTitle": "TC1: Test the automatic language recognition for two languages detect language is enabled",
              "timedOut": false,
              "duration": 792,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const textOfButton = await page.$eval(buttonDetectLanguage, el => el.innerText);                  \nawait page.screenshot({ path: pathToScreenshots.concat(\"detectLanguageEnabled.png\")});        \nexpect(textOfButton).to.equal(textDetectLanguage);",
              "err": {},
              "uuid": "70ef4c39-003e-40e9-8d3b-62cc6b272f7e",
              "parentUUID": "62effb5c-c0de-476f-9aa2-a5ca2b84adb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "autodetect Slovak language",
              "fullTitle": "TC1: Test the automatic language recognition for two languages autodetect Slovak language",
              "timedOut": false,
              "duration": 2370,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await autodetectLanguage(textInputSK, textDetectedSK);",
              "err": {},
              "uuid": "cfa3f84c-82b5-4404-9807-30cebca85ec4",
              "parentUUID": "62effb5c-c0de-476f-9aa2-a5ca2b84adb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "autodetect Czech language",
              "fullTitle": "TC1: Test the automatic language recognition for two languages autodetect Czech language",
              "timedOut": false,
              "duration": 2338,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await autodetectLanguage(textInputCZ, textDetectedCZ);",
              "err": {},
              "uuid": "a05f3921-8add-4a37-910a-76cb2bbf6a72",
              "parentUUID": "62effb5c-c0de-476f-9aa2-a5ca2b84adb4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f7f4f892-29e8-4e93-bdb0-659bbe4e4f37",
            "70ef4c39-003e-40e9-8d3b-62cc6b272f7e",
            "cfa3f84c-82b5-4404-9807-30cebca85ec4",
            "a05f3921-8add-4a37-910a-76cb2bbf6a72"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5526,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "401888df-d38a-4800-91a3-a67a0128e087",
          "title": "TC2: Test the manual language picker",
          "fullFile": "C:\\Citrix\\Pupeteer\\test\\02_manualLanguagePicker.js",
          "file": "\\test\\02_manualLanguagePicker.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "TC2: Test the manual language picker \"before all\" hook",
              "timedOut": false,
              "duration": 1195,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "page = await browser.newPage();\nawait page.goto(URL);\nawait page.setViewport({ width: screenWidth, height: screenHeight });",
              "err": {},
              "uuid": "68ba0bb1-bf2d-4709-8418-f57a1b7bb70a",
              "parentUUID": "401888df-d38a-4800-91a3-a67a0128e087",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "TC2: Test the manual language picker \"after all\" hook",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page.close();",
              "err": {},
              "uuid": "0a53dcbf-e64f-43cc-ba01-9189cb18e935",
              "parentUUID": "401888df-d38a-4800-91a3-a67a0128e087",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "TC2: Test the manual language picker \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// make screenshot for failed tests\nif (this.currentTest.state === 'failed') {\n    await page.screenshot({\n        path: pathToScreenshots.concat(Date.now()).concat(\"_failure.png\"),\n        fullPage: true\n    });\n}",
              "err": {},
              "uuid": "49513c4d-cad0-467b-a030-0cc4f853fc19",
              "parentUUID": "401888df-d38a-4800-91a3-a67a0128e087",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "page should have the correct page title",
              "fullTitle": "TC2: Test the manual language picker page should have the correct page title",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(await page.title()).to.eql(pageTitle);",
              "err": {},
              "uuid": "2e9ed986-4c6b-46c5-a9da-0d0a964739a8",
              "parentUUID": "401888df-d38a-4800-91a3-a67a0128e087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pick language from suggested languages",
              "fullTitle": "TC2: Test the manual language picker pick language from suggested languages",
              "timedOut": false,
              "duration": 2039,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page.waitForSelector(txtAreaInput);\n      await page.keyboard.type(textInputManual); \n      await page.waitForSelector(txtAreaInput);\n      \n      let suggestions = await page.$$eval(buttonSuggestions, buttons => { return buttons.map(but => but.innerText.toLowerCase()).slice(0, 8)});\n      suggestions.splice(4,1);                                    // remove empty value        \n      for (let i=1;i<suggestions.length;i++) {                    // skip the english detected option       \n          let firstLetterBig = toTitleCase(suggestions[i]);\n          const mySelector = \"//div[contains(text(), '\".concat(firstLetterBig).concat(\"') and contains(@class, 'jfk-button')]\");\n          const myLink = await page.$x(mySelector);\n  \n          if (myLink.length > 0) {\n              if ((myLink.length > 1) && (i>=suggestions.length/2)) {             // ugly way how to deal with same language suggested for source and translation\n                  await myLink[1].click();    \n              }\n              else {\n                  await myLink[0].click();\n              }\n          } else throw new Error(\"Link not found for selector: \".concat(mySelector));            \n      }\n      await page.waitForSelector(txtAreaTranslation);\n      let rightTextTranslated = await page.$eval(txtAreaTranslation, el => el.innerText);                      \n      assert.ok(rightTextTranslated)",
              "err": {},
              "uuid": "407f4ff3-d177-4c41-9674-2666ea8e1ea0",
              "parentUUID": "401888df-d38a-4800-91a3-a67a0128e087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pick language from the list of languages for input",
              "fullTitle": "TC2: Test the manual language picker pick language from the list of languages for input",
              "timedOut": false,
              "duration": 2183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page.waitForSelector(buttonDeleteInput);\n      await page.click(buttonDeleteInput);\n      await page.waitForSelector(txtAreaInput);\n      await page.keyboard.type(textInputPickFromList); \n      const myLanguages = [\"Slovak\", \"Czech\"];                             // TODO parametrize this\n      const myCodes = [\"sk\", \"cs\"];\n      \n      for (let i=0;i<myLanguages.length;i++) {                       \n          // open the language list \n          await page.click(buttonOpenSourceLanguages);\n          await page.waitForSelector(inputSearchLanguageInput); \n          const mySelector = \"//div[contains(text(), '\".concat(myLanguages[i]).concat(\"') and contains(@class, 'language_list_item')]\");\n          const myLink = await page.$x(mySelector);\n          if (myLink.length > 0) {\n              await myLink[0].click();                                    \n          } else throw new Error(\"Link not found for selector: \".concat(mySelector));            \n          await page.waitForSelector(txtAreaInput);\n          let selectedCode = \"#sugg-item-\".concat(myCodes[i]);\n          let selectedLanguage = await page.$eval(selectedCode, el => el.innerText);\n          expect(selectedLanguage).to.equal(myLanguages[i].toUpperCase());  \n      }",
              "err": {},
              "uuid": "8dced934-743d-4a4c-8869-28cab1dc1d9e",
              "parentUUID": "401888df-d38a-4800-91a3-a67a0128e087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pick language from the list of languages for translations",
              "fullTitle": "TC2: Test the manual language picker pick language from the list of languages for translations",
              "timedOut": false,
              "duration": 1876,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page.waitForSelector(buttonDeleteInput);\n      await page.click(buttonDeleteInput);\n      await page.waitForSelector(txtAreaInput); \n      await page.keyboard.type(textInputPickFromList);         \n      const myLanguages = [\"Sesotho\", \"Urdu\"];                             // TODO parametrize this\n      const myCodes = [\"st\", \"ur\"];\n      \n      for (let i=0;i<myLanguages.length;i++) {                                   \n          // open the language list\n          await page.click(buttonOpenTargetLanguages);\n          await page.waitForSelector(inputSearchLanguageTranslation);\n          \n          const mySelector = \"(//div[contains(text(), '\".concat(myLanguages[i]).concat(\"') and contains(@class, 'language_list_item')])[3]\");      //TODO ugly hardcode selector\n          const myLink = await page.$x(mySelector);\n          if (myLink.length > 0) {\n              await myLink[0].click();                                    \n          } else throw new Error(\"Link not found for selector: \".concat(mySelector));            \n          await page.waitForSelector(txtAreaInput);\n          let selectedCode = \"#sugg-item-\".concat(myCodes[i]);\n          let selectedLanguage = await page.$eval(selectedCode, el => el.innerText);\n          expect(selectedLanguage).to.equal(myLanguages[i].toUpperCase());\n      }",
              "err": {},
              "uuid": "1f947acb-4c2d-4391-95d1-3ea3be30d05e",
              "parentUUID": "401888df-d38a-4800-91a3-a67a0128e087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "search language in the list for input",
              "fullTitle": "TC2: Test the manual language picker search language in the list for input",
              "timedOut": false,
              "duration": 2336,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page.waitForSelector(buttonDeleteInput);\n      await page.click(buttonDeleteInput);\n      await page.waitForSelector(txtAreaInput); \n      await page.keyboard.type(textInputSearchList);         \n      const myLanguages = [\"Arabic\", \"Croatian\"];                             // TODO parametrize this\n      const myCodes = [\"ar\",\"hr\"];\n      for (let i=0;i<myLanguages.length;i++) {                                   \n          // open the language list\n          await page.click(buttonOpenSourceLanguages);\n          await page.waitForSelector(inputSearchLanguageInput); \n          await page.focus(inputSearchLanguageInput);\n          await page.keyboard.type(myLanguages[i]);         \n          await page.keyboard.press('Enter');\n          await page.waitForSelector(txtAreaInput);\n          let selectedCode = \"#sugg-item-\".concat(myCodes[i]);\n          let selectedLanguage = await page.$eval(selectedCode, el => el.innerText);\n          expect(selectedLanguage).to.equal(myLanguages[i].toUpperCase());            \n      }",
              "err": {},
              "uuid": "77419957-d200-4cf7-9880-12d4e7a144ae",
              "parentUUID": "401888df-d38a-4800-91a3-a67a0128e087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "search language in the list for translations",
              "fullTitle": "TC2: Test the manual language picker search language in the list for translations",
              "timedOut": false,
              "duration": 2241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page.waitForSelector(buttonDeleteInput);\n      await page.click(buttonDeleteInput);\n      await page.waitForSelector(txtAreaInput); \n      await page.keyboard.type(textInputSearchList);         \n      const myLanguages = [\"Russian\", \"Italian\"];                             // TODO parametrize this\n      const myCodes = [\"ru\",\"it\"];\n      for (let i=0;i<myLanguages.length;i++) {                                   \n          // open the language list\n          await page.click(buttonOpenTargetLanguages);\n          await page.waitForSelector(inputSearchLanguageTranslation);\n          await page.focus(inputSearchLanguageTranslation);\n          await page.keyboard.type(myLanguages[i]);         \n          await page.keyboard.press('Enter');\n          await page.waitForSelector(txtAreaInput);\n          let selectedCode = \"#sugg-item-\".concat(myCodes[i]);\n          let selectedLanguage = await page.$eval(selectedCode, el => el.innerText);\n          expect(selectedLanguage).to.equal(myLanguages[i].toUpperCase());            \n      }",
              "err": {},
              "uuid": "da238a12-22f4-4c0e-97cf-a73a3a6aee6e",
              "parentUUID": "401888df-d38a-4800-91a3-a67a0128e087",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e9ed986-4c6b-46c5-a9da-0d0a964739a8",
            "407f4ff3-d177-4c41-9674-2666ea8e1ea0",
            "8dced934-743d-4a4c-8869-28cab1dc1d9e",
            "1f947acb-4c2d-4391-95d1-3ea3be30d05e",
            "77419957-d200-4cf7-9880-12d4e7a144ae",
            "da238a12-22f4-4c0e-97cf-a73a3a6aee6e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10693,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "30c3aeb1-865d-4b33-8b50-346ed4895f16",
          "title": "TC3: Test the Language exchange option",
          "fullFile": "C:\\Citrix\\Pupeteer\\test\\03_languageExchangeOption.js",
          "file": "\\test\\03_languageExchangeOption.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "TC3: Test the Language exchange option \"before all\" hook",
              "timedOut": false,
              "duration": 1335,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "page = await browser.newPage();\nawait page.goto(URL);\nawait page.setViewport({ width: screenWidth, height: screenHeight });",
              "err": {},
              "uuid": "2ef29c0f-3ce5-4714-96d8-19ac950d2228",
              "parentUUID": "30c3aeb1-865d-4b33-8b50-346ed4895f16",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "TC3: Test the Language exchange option \"after all\" hook",
              "timedOut": false,
              "duration": 43,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page.close();",
              "err": {},
              "uuid": "3136c161-3be0-4a72-9f9a-2d89e8d0f387",
              "parentUUID": "30c3aeb1-865d-4b33-8b50-346ed4895f16",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "TC3: Test the Language exchange option \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// make screenshot for failed tests\nif (this.currentTest.state === 'failed') {\n    await page.screenshot({\n        path: pathToScreenshots.concat(Date.now()).concat(\"_failure.png\"),\n        fullPage: true\n    });\n}",
              "err": {},
              "uuid": "1966093e-1090-4864-aecc-ac63b74f455a",
              "parentUUID": "30c3aeb1-865d-4b33-8b50-346ed4895f16",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "page should have the correct page title",
              "fullTitle": "TC3: Test the Language exchange option page should have the correct page title",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(await page.title()).to.eql(pageTitle);",
              "err": {},
              "uuid": "eeb33af5-9811-4367-b9a0-c6c439d23c68",
              "parentUUID": "30c3aeb1-865d-4b33-8b50-346ed4895f16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "exchange button swaps input and output",
              "fullTitle": "TC3: Test the Language exchange option exchange button swaps input and output",
              "timedOut": false,
              "duration": 3233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// select czech for input\n  await page.waitForSelector(txtAreaInput);\n  await page.click(buttonOpenSourceLanguages);\n  await page.waitForSelector(inputSearchLanguageInput); \n  await page.focus(inputSearchLanguageInput);\n  await page.keyboard.type(\"Czech\");         \n  await page.keyboard.press('Enter');\n  // select english for translation        \n  await page.click(buttonOpenTargetLanguages);\n  await page.waitForSelector(inputSearchLanguageTranslation);\n  await page.focus(inputSearchLanguageTranslation);\n  await page.keyboard.type(\"English\");         \n  await page.keyboard.press('Enter');\n    \n  await page.waitForSelector(txtAreaInput);\n  await page.keyboard.type(textInputCZ);        \n  await page.waitForSelector(txtAreaInput);\n  // check sides before the exchange\n  await page.screenshot({ path: pathToScreenshots.concat(\"beforelanguageExchange.png\")});        \n  await page.waitForSelector(txtAreaInput);                \n  let leftTextBefore = await page.$eval(txtAreaInput, el => el.value);          \n  expect(leftTextBefore).to.equal(textInputCZ);         \n  await page.waitForSelector(txtAreaTranslation);                \n  let rightTextBefore = await page.$eval(txtAreaTranslation, el => el.innerText);          \n  expect(rightTextBefore).to.equal(textOutputEN);         \n  // exchange sides\n  await page.waitForSelector(buttonSwapLanguages);\n  await page.click(buttonSwapLanguages);\n  \n  // check sides after the exchange\n  await page.screenshot({ path: pathToScreenshots.concat(\"afterlanguageExchange.png\")});        \n  await page.waitForSelector(txtAreaInput);                \n  let leftTextAfter = await page.$eval(txtAreaInput, el => el.value);          \n  expect(leftTextAfter).to.equal(textOutputEN);         \n  await page.waitForSelector(txtAreaTranslation);                \n  let rightTextAfter = await page.$eval(txtAreaTranslation, el => el.innerText);          \n  expect(rightTextAfter).to.equal(textInputCZ);",
              "err": {},
              "uuid": "0b1cd7db-5c80-44c4-8fc3-1d2d4519dde4",
              "parentUUID": "30c3aeb1-865d-4b33-8b50-346ed4895f16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "repeat language swap again",
              "fullTitle": "TC3: Test the Language exchange option repeat language swap again",
              "timedOut": false,
              "duration": 1666,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// check sides before the exchange\nawait page.screenshot({ path: pathToScreenshots.concat(\"beforelanguageExchangeRepeated.png\")});        \nawait page.waitForSelector(txtAreaInput);                \nlet leftTextBefore = await page.$eval(txtAreaInput, el => el.value);          \nexpect(leftTextBefore).to.equal(textOutputEN);         \nawait page.waitForSelector(txtAreaTranslation);                \nlet rightTextBefore = await page.$eval(txtAreaTranslation, el => el.innerText);          \nexpect(rightTextBefore).to.equal(textInputCZ);         \n// exchange sides\nawait page.waitForSelector(buttonSwapLanguages);\nawait page.click(buttonSwapLanguages);\n\n// check sides after the exchange\nawait page.screenshot({ path: pathToScreenshots.concat(\"afterlanguageExchangeRepeated.png\")});        \nawait page.waitForSelector(txtAreaInput);                \nlet leftTextAfter = await page.$eval(txtAreaInput, el => el.value);          \nexpect(leftTextAfter).to.equal(textInputCZ);         \nawait page.waitForSelector(txtAreaTranslation);                \nlet rightTextAfter = await page.$eval(txtAreaTranslation, el => el.innerText);          \nexpect(rightTextAfter).to.equal(textOutputEN);",
              "err": {},
              "uuid": "571fd86c-ae6b-4faf-8ff7-fac53aaf2259",
              "parentUUID": "30c3aeb1-865d-4b33-8b50-346ed4895f16",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eeb33af5-9811-4367-b9a0-c6c439d23c68",
            "0b1cd7db-5c80-44c4-8fc3-1d2d4519dde4",
            "571fd86c-ae6b-4faf-8ff7-fac53aaf2259"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4912,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c366d000-2632-4af3-8412-b8866d369419",
          "title": "TC4: Test the delete text option",
          "fullFile": "C:\\Citrix\\Pupeteer\\test\\04_deleteTextOption.js",
          "file": "\\test\\04_deleteTextOption.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "TC4: Test the delete text option \"before all\" hook",
              "timedOut": false,
              "duration": 1307,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "page = await browser.newPage();\nawait page.goto(URL);\nawait page.setViewport({ width: screenWidth, height: screenHeight });",
              "err": {},
              "uuid": "0432adaf-7ee9-4f0b-a3dc-5a43b9cc6ec5",
              "parentUUID": "c366d000-2632-4af3-8412-b8866d369419",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "TC4: Test the delete text option \"after all\" hook",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page.close();",
              "err": {},
              "uuid": "f8dac536-ae4d-4f20-89de-ef6fff187c07",
              "parentUUID": "c366d000-2632-4af3-8412-b8866d369419",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "TC4: Test the delete text option \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// make screenshot for failed tests\nif (this.currentTest.state === 'failed') {\n    await page.screenshot({\n        path: pathToScreenshots.concat(Date.now()).concat(\"_failure.png\"),\n        fullPage: true\n    });\n}",
              "err": {},
              "uuid": "e87160a7-005f-49e8-a483-9509c98102b5",
              "parentUUID": "c366d000-2632-4af3-8412-b8866d369419",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "page should have the correct page title",
              "fullTitle": "TC4: Test the delete text option page should have the correct page title",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(await page.title()).to.eql(pageTitle);",
              "err": {},
              "uuid": "ce62f7f4-6231-42ff-ada5-3a419c94cfd2",
              "parentUUID": "c366d000-2632-4af3-8412-b8866d369419",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete button is visible when text is entered",
              "fullTitle": "TC4: Test the delete text option delete button is visible when text is entered",
              "timedOut": false,
              "duration": 2077,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page.keyboard.type(textInputDE); \nawait page.waitForNavigation();   \nconst deleteButton = await page.$(buttonDeleteInput);      \nawait page.screenshot({ path: pathToScreenshots.concat(\"deleteButtonIsVisible.png\")});\nassert.ok(deleteButton);",
              "err": {},
              "uuid": "acbc77bf-1e0a-4479-88a6-ff9ebd77b26f",
              "parentUUID": "c366d000-2632-4af3-8412-b8866d369419",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "text is deleted after clicking on delete button",
              "fullTitle": "TC4: Test the delete text option text is deleted after clicking on delete button",
              "timedOut": false,
              "duration": 1151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page.screenshot({ path: pathToScreenshots.concat(\"textBeforeIsDeleted.png\")}); \n     await page.click(buttonDeleteInput);\n     await page.screenshot({ path: pathToScreenshots.concat(\"textIsDeleted.png\")});\n     const textDeleted = await page.$eval(txtAreaInput, el => el.value);  \n     expect(textDeleted).to.equal('');                                                                     // TODO: improve with something like is empty?",
              "err": {},
              "uuid": "c59ab7f1-dce4-4839-b738-a29687f12f66",
              "parentUUID": "c366d000-2632-4af3-8412-b8866d369419",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce62f7f4-6231-42ff-ada5-3a419c94cfd2",
            "acbc77bf-1e0a-4479-88a6-ff9ebd77b26f",
            "c59ab7f1-dce4-4839-b738-a29687f12f66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3243,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8715c4ca-600a-4eb4-88ee-ff6ea50a3056",
          "title": "TC5: Test the document translation functionality",
          "fullFile": "C:\\Citrix\\Pupeteer\\test\\05_documentTranslate.js",
          "file": "\\test\\05_documentTranslate.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "TC5: Test the document translation functionality \"before all\" hook",
              "timedOut": false,
              "duration": 1323,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "page = await browser.newPage();\nawait page.goto(URL);\nawait page.setViewport({ width: screenWidth, height: screenHeight });",
              "err": {},
              "uuid": "3dd127a1-c280-478e-bdac-b3d5d0a3ffc4",
              "parentUUID": "8715c4ca-600a-4eb4-88ee-ff6ea50a3056",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "TC5: Test the document translation functionality \"after all\" hook",
              "timedOut": false,
              "duration": 45,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page.close();",
              "err": {},
              "uuid": "c90fe1fb-c5c2-438f-a9c0-fe82496ed55d",
              "parentUUID": "8715c4ca-600a-4eb4-88ee-ff6ea50a3056",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "TC5: Test the document translation functionality \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// make screenshot for failed tests\nif (this.currentTest.state === 'failed') {\n    await page.screenshot({\n        path: pathToScreenshots.concat(Date.now()).concat(\"_failure.png\"),\n        fullPage: true\n    });\n}",
              "err": {},
              "uuid": "dbed600e-df54-4928-84b7-cde37e575e06",
              "parentUUID": "8715c4ca-600a-4eb4-88ee-ff6ea50a3056",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "page should have the correct page title",
              "fullTitle": "TC5: Test the document translation functionality page should have the correct page title",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(await page.title()).to.eql(pageTitle);",
              "err": {},
              "uuid": "94d629a5-28f4-431f-9915-591ae72e9a2a",
              "parentUUID": "8715c4ca-600a-4eb4-88ee-ff6ea50a3056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "translate .txt file",
              "fullTitle": "TC5: Test the document translation functionality translate .txt file",
              "timedOut": false,
              "duration": 2851,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await translateDocument(filePathTXT,fileTypeTXT);",
              "err": {},
              "uuid": "450bc0c0-2d85-4211-8de6-3fb248d53d61",
              "parentUUID": "8715c4ca-600a-4eb4-88ee-ff6ea50a3056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "translate .doc file",
              "fullTitle": "TC5: Test the document translation functionality translate .doc file",
              "timedOut": false,
              "duration": 2838,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await translateDocument(filePathDOC, fileTypeDOC);",
              "err": {},
              "uuid": "fcec6ddc-a581-47df-a498-47c96f0b51dd",
              "parentUUID": "8715c4ca-600a-4eb4-88ee-ff6ea50a3056",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "translate .pdf file",
              "fullTitle": "TC5: Test the document translation functionality translate .pdf file",
              "timedOut": false,
              "duration": 2864,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await translateDocument(filePathPDF, fileTypePDF);",
              "err": {},
              "uuid": "4ec99101-b3ff-4f22-9d19-ac4a02ecbeb5",
              "parentUUID": "8715c4ca-600a-4eb4-88ee-ff6ea50a3056",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "94d629a5-28f4-431f-9915-591ae72e9a2a",
            "450bc0c0-2d85-4211-8de6-3fb248d53d61",
            "fcec6ddc-a581-47df-a498-47c96f0b51dd",
            "4ec99101-b3ff-4f22-9d19-ac4a02ecbeb5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8567,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}